(window.webpackJsonp = window.webpackJsonp || []).push([
  [76],
  {
    28: function (e, t) {
      !(function (e) {
        "use strict";
        if (!e.fetch) {
          var t = "URLSearchParams" in e,
            r = "Symbol" in e && "iterator" in Symbol,
            s =
              "FileReader" in e &&
              "Blob" in e &&
              (function () {
                try {
                  return new Blob(), !0;
                } catch (e) {
                  return !1;
                }
              })(),
            o = "FormData" in e,
            n = "ArrayBuffer" in e;
          if (n)
            var i = [
                "[object Int8Array]",
                "[object Uint8Array]",
                "[object Uint8ClampedArray]",
                "[object Int16Array]",
                "[object Uint16Array]",
                "[object Int32Array]",
                "[object Uint32Array]",
                "[object Float32Array]",
                "[object Float64Array]",
              ],
              a = function (e) {
                return e && DataView.prototype.isPrototypeOf(e);
              },
              u =
                ArrayBuffer.isView ||
                function (e) {
                  return e && -1 < i.indexOf(Object.prototype.toString.call(e));
                };
          (p.prototype.append = function (e, t) {
            (e = d(e)), (t = h(t));
            var r = this.map[e];
            this.map[e] = r ? r + "," + t : t;
          }),
            (p.prototype.delete = function (e) {
              delete this.map[d(e)];
            }),
            (p.prototype.get = function (e) {
              return (e = d(e)), this.has(e) ? this.map[e] : null;
            }),
            (p.prototype.has = function (e) {
              return this.map.hasOwnProperty(d(e));
            }),
            (p.prototype.set = function (e, t) {
              this.map[d(e)] = h(t);
            }),
            (p.prototype.forEach = function (e, t) {
              for (var r in this.map)
                this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this);
            }),
            (p.prototype.keys = function () {
              var r = [];
              return (
                this.forEach(function (e, t) {
                  r.push(t);
                }),
                f(r)
              );
            }),
            (p.prototype.values = function () {
              var t = [];
              return (
                this.forEach(function (e) {
                  t.push(e);
                }),
                f(t)
              );
            }),
            (p.prototype.entries = function () {
              var r = [];
              return (
                this.forEach(function (e, t) {
                  r.push([t, e]);
                }),
                f(r)
              );
            }),
            r && (p.prototype[Symbol.iterator] = p.prototype.entries);
          var c = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
          (g.prototype.clone = function () {
            return new g(this, {
              body: this._bodyInit,
            });
          }),
            w.call(g.prototype),
            w.call(_.prototype),
            (_.prototype.clone = function () {
              return new _(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new p(this.headers),
                url: this.url,
              });
            }),
            (_.error = function () {
              var e = new _(null, {
                status: 0,
                statusText: "",
              });
              return (e.type = "error"), e;
            });
          var l = [301, 302, 303, 307, 308];
          (_.redirect = function (e, t) {
            if (-1 === l.indexOf(t))
              throw new RangeError("Invalid status code");
            return new _(null, {
              status: t,
              headers: {
                location: e,
              },
            });
          }),
            (e.Headers = p),
            (e.Request = g),
            (e.Response = _),
            (e.fetch = function (n, i) {
              return new Promise(function (r, e) {
                var t = new g(n, i),
                  o = new XMLHttpRequest();
                (o.onload = function () {
                  var e = {
                    status: o.status,
                    statusText: o.statusText,
                    headers: (function (e) {
                      var n = new p();
                      return (
                        e.split(/\r?\n/).forEach(function (e) {
                          var t = e.split(":"),
                            r = t.shift().trim();
                          if (r) {
                            var o = t.join(":").trim();
                            n.append(r, o);
                          }
                        }),
                        n
                      );
                    })(o.getAllResponseHeaders() || ""),
                  };
                  e.url =
                    "responseURL" in o
                      ? o.responseURL
                      : e.headers.get("X-Request-URL");
                  var t = "response" in o ? o.response : o.responseText;
                  r(new _(t, e));
                }),
                  (o.onerror = function () {
                    e(new TypeError("Network request failed"));
                  }),
                  (o.ontimeout = function () {
                    e(new TypeError("Network request failed"));
                  }),
                  o.open(t.method, t.url, !0),
                  "include" === t.credentials && (o.withCredentials = !0),
                  "responseType" in o && s && (o.responseType = "blob"),
                  t.headers.forEach(function (e, t) {
                    o.setRequestHeader(t, e);
                  }),
                  o.send(void 0 === t._bodyInit ? null : t._bodyInit);
              });
            }),
            (e.fetch.polyfill = !0);
        }
        function d(e) {
          if (
            ("string" != typeof e && (e = String(e)),
            /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))
          )
            throw new TypeError("Invalid character in header field name");
          return e.toLowerCase();
        }
        function h(e) {
          return "string" != typeof e && (e = String(e)), e;
        }
        function f(t) {
          var e = {
            next: function () {
              var e = t.shift();
              return {
                done: void 0 === e,
                value: e,
              };
            },
          };
          return (
            r &&
              (e[Symbol.iterator] = function () {
                return e;
              }),
            e
          );
        }
        function p(t) {
          (this.map = {}),
            t instanceof p
              ? t.forEach(function (e, t) {
                  this.append(t, e);
                }, this)
              : Array.isArray(t)
              ? t.forEach(function (e) {
                  this.append(e[0], e[1]);
                }, this)
              : t &&
                Object.getOwnPropertyNames(t).forEach(function (e) {
                  this.append(e, t[e]);
                }, this);
        }
        function y(e) {
          if (e.bodyUsed) return Promise.reject(new TypeError("Already read"));
          e.bodyUsed = !0;
        }
        function b(r) {
          return new Promise(function (e, t) {
            (r.onload = function () {
              e(r.result);
            }),
              (r.onerror = function () {
                t(r.error);
              });
          });
        }
        function m(e) {
          var t = new FileReader(),
            r = b(t);
          return t.readAsArrayBuffer(e), r;
        }
        function v(e) {
          if (e.slice) return e.slice(0);
          var t = new Uint8Array(e.byteLength);
          return t.set(new Uint8Array(e)), t.buffer;
        }
        function w() {
          return (
            (this.bodyUsed = !1),
            (this._initBody = function (e) {
              if ((this._bodyInit = e))
                if ("string" == typeof e) this._bodyText = e;
                else if (s && Blob.prototype.isPrototypeOf(e))
                  this._bodyBlob = e;
                else if (o && FormData.prototype.isPrototypeOf(e))
                  this._bodyFormData = e;
                else if (t && URLSearchParams.prototype.isPrototypeOf(e))
                  this._bodyText = e.toString();
                else if (n && s && a(e))
                  (this._bodyArrayBuffer = v(e.buffer)),
                    (this._bodyInit = new Blob([this._bodyArrayBuffer]));
                else {
                  if (!n || (!ArrayBuffer.prototype.isPrototypeOf(e) && !u(e)))
                    throw new Error("unsupported BodyInit type");
                  this._bodyArrayBuffer = v(e);
                }
              else this._bodyText = "";
              this.headers.get("content-type") ||
                ("string" == typeof e
                  ? this.headers.set("content-type", "text/plain;charset=UTF-8")
                  : this._bodyBlob && this._bodyBlob.type
                  ? this.headers.set("content-type", this._bodyBlob.type)
                  : t &&
                    URLSearchParams.prototype.isPrototypeOf(e) &&
                    this.headers.set(
                      "content-type",
                      "application/x-www-form-urlencoded;charset=UTF-8"
                    ));
            }),
            s &&
              ((this.blob = function () {
                var e = y(this);
                if (e) return e;
                if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                if (this._bodyArrayBuffer)
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as blob");
                return Promise.resolve(new Blob([this._bodyText]));
              }),
              (this.arrayBuffer = function () {
                return this._bodyArrayBuffer
                  ? y(this) || Promise.resolve(this._bodyArrayBuffer)
                  : this.blob().then(m);
              })),
            (this.text = function () {
              var e = y(this);
              if (e) return e;
              if (this._bodyBlob)
                return (function (e) {
                  var t = new FileReader(),
                    r = b(t);
                  return t.readAsText(e), r;
                })(this._bodyBlob);
              if (this._bodyArrayBuffer)
                return Promise.resolve(
                  (function (e) {
                    for (
                      var t = new Uint8Array(e), r = new Array(t.length), o = 0;
                      o < t.length;
                      o++
                    )
                      r[o] = String.fromCharCode(t[o]);
                    return r.join("");
                  })(this._bodyArrayBuffer)
                );
              if (this._bodyFormData)
                throw new Error("could not read FormData body as text");
              return Promise.resolve(this._bodyText);
            }),
            o &&
              (this.formData = function () {
                return this.text().then(x);
              }),
            (this.json = function () {
              return this.text().then(JSON.parse);
            }),
            this
          );
        }
        function g(e, t) {
          var r = (t = t || {}).body;
          if (e instanceof g) {
            if (e.bodyUsed) throw new TypeError("Already read");
            (this.url = e.url),
              (this.credentials = e.credentials),
              t.headers || (this.headers = new p(e.headers)),
              (this.method = e.method),
              (this.mode = e.mode),
              r ||
                null == e._bodyInit ||
                ((r = e._bodyInit), (e.bodyUsed = !0));
          } else this.url = String(e);
          if (
            ((this.credentials = t.credentials || this.credentials || "omit"),
            (!t.headers && this.headers) || (this.headers = new p(t.headers)),
            (this.method = (function (e) {
              var t = e.toUpperCase();
              return -1 < c.indexOf(t) ? t : e;
            })(t.method || this.method || "GET")),
            (this.mode = t.mode || this.mode || null),
            (this.referrer = null),
            ("GET" === this.method || "HEAD" === this.method) && r)
          )
            throw new TypeError("Body not allowed for GET or HEAD requests");
          this._initBody(r);
        }
        function x(e) {
          var n = new FormData();
          return (
            e
              .trim()
              .split("&")
              .forEach(function (e) {
                if (e) {
                  var t = e.split("="),
                    r = t.shift().replace(/\+/g, " "),
                    o = t.join("=").replace(/\+/g, " ");
                  n.append(decodeURIComponent(r), decodeURIComponent(o));
                }
              }),
            n
          );
        }
        function _(e, t) {
          t || (t = {}),
            (this.type = "default"),
            (this.status = "status" in t ? t.status : 200),
            (this.ok = 200 <= this.status && this.status < 300),
            (this.statusText = "statusText" in t ? t.statusText : "OK"),
            (this.headers = new p(t.headers)),
            (this.url = t.url || ""),
            this._initBody(e);
        }
      })("undefined" != typeof self ? self : this);
    },
    4299: function (e, t, r) {
      r(76), r(28), (e.exports = r(4300));
    },
    4300: function (e, t) {
      $(document).ready(function () {
        var s = new mapboxgl.Map({
            container: "mapbox-map",
            style: "mapbox://styles/codeorg/cjz36duae88ds1cp7ll7smx6s",
            zoom: 1,
            minZoom: 1,
            center: [-98, 39],
          }),
          a = null;
        function u(e, t) {
          for (var r = t; 180 < Math.abs(e.lng - r[0]); )
            r[0] += e.lng > r[0] ? 360 : -360;
          return r;
        }
        s.dragRotate.disable(),
          s.scrollZoom.disable(),
          s.dragPan.disable(),
          s.on("load", function () {
            s.addSource("hoctiles", {
              type: "vector",
              url: "mapbox://codeorg.hoctiles",
            }),
              s.addLayer({
                id: "hoc-events",
                type: "symbol",
                source: "hoctiles",
                "source-layer": "hoc",
                layout: {
                  visibility: "visible",
                  "icon-allow-overlap": !0,
                  "icon-size": 1,
                  "icon-image": "circle-11-orange",
                },
                filter: ["!=", "review", "approved"],
              }),
              s.addLayer({
                id: "hoc-special-events",
                type: "symbol",
                source: "hoctiles",
                "source-layer": "hoc",
                layout: {
                  visibility: "visible",
                  "icon-allow-overlap": !0,
                  "icon-size": 1.1,
                  "icon-image": "marker-15-red",
                },
                filter: ["==", "review", "approved"],
              }),
              s.addControl(new mapboxgl.FullscreenControl(), "top-right"),
              s.addControl(
                new mapboxgl.NavigationControl({
                  showCompass: !1,
                }),
                "bottom-right"
              );
            var e = document.createElement("div");
            function t() {
              s.scrollZoom.enable(), s.dragPan.enable();
            }
            (e.id = "inmaplegend"),
              (e.className = "inmap-mapbox-legend"),
              (e.index = 1),
              $("#belowmaplegend div").clone().appendTo(e),
              document.getElementById("mapbox-map").appendChild(e),
              s.on("click", function (e) {
                t();
              }),
              s.on("zoom", function (e) {
                t();
              }),
              s.on("resize", function (e) {
                t();
              }),
              s.on("click", "hoc-events", function (e) {
                var t = e.features[0].geometry.coordinates.slice(),
                  r = e.features[0].properties.organization_name,
                  o = e.features[0].properties.city;
                a && a.remove();
                var n = "";
                if (o) {
                  n = r + (0 < o.length ? " (" + o + ")" : "");
                } else {
                  n = r;
                }

                a = new mapboxgl.Popup({
                  closeButton: !1,
                })
                  .setLngLat(u(e.lngLat, t))
                  .setText(n)
                  .addTo(s);
              }),
              s.on("click", "hoc-special-events", function (e) {
                var t = e.features[0].geometry.coordinates.slice(),
                  r = e.features[0].properties.organization_name,
                  o = e.features[0].properties.city,
                  n = e.features[0].properties.description;
                a && a.remove();
                var i = "";
                if (o) {
                  i = r + (0 < o.length ? " (" + o + ")" : "");
                } else {
                  i = r;
                }
                a = new mapboxgl.Popup({
                  closeButton: !1,
                })
                  .setLngLat(u(e.lngLat, t))
                  .setHTML(i)
                  .addTo(s);
              }),
              s.on("mouseenter", "hoc-events", function () {
                s.getCanvas().style.cursor = "pointer";
              }),
              s.on("mouseenter", "hoc-special-events", function () {
                s.getCanvas().style.cursor = "pointer";
              }),
              s.on("mouseleave", "hoc-events", function () {
                s.getCanvas().style.cursor = "";
              }),
              s.on("mouseleave", "hoc-special-events", function () {
                s.getCanvas().style.cursor = "";
              });
          });
      });
    },
  },
  [[4299, 0, 1]],
]);
